/*
题目描述
fps游戏是第一人称射击游戏。这类游戏有一个很重要的技巧也是基本功之一的，是压枪。
为了模拟真实环境，在游戏里你每开一枪，枪口都会往上和左右浮动。
如果你想使枪口在某个范围内，为了提高精准度，你就必须压枪。
而且每把枪的后坐力不同和有效打击距离不同，就需要对每把枪都很熟悉，能很快的计算出在多远距离外开枪枪口会往上和左右浮动多少。
现在只考虑枪的垂直浮动。
假设在d米外有一个靶子，初始枪口正对靶心的圆心，靶心是个半径为r米的圆,现在你要射击c次。(你可以把枪看成一个点)。
为了省力，要使压枪次数最少。
只有当在靶上的射击位置在靶心之外时才需要压枪。
每次压枪，枪口都会回到上次的射击位置。
每次开枪最多只能压一次枪，不能连续压枪。

输入
 每个输入文件只包含一组数据。
包含3个正整数d,r，c和1个实数a(d,r,c意义如上文所述，a是每次开枪，枪口向上浮动的角度)。
(1 <= d,r <= 100,0 <= c <= 1000000,0 <= a < 90)

输出
 一个整数，表示压枪的最少次数。

样例输入 Copy
10 1 10 3
样例输出 Copy
8
*/

#include <bits/stdc++.h>
using namespace std;
const double pi = acos(-1);
int main()
{
    ios :: sync_with_stdio(false);
    cin.tie(0);
    int d, r, c;
    double a;
    cin>>d>>r>>c>>a;
    //求在需要压枪的最小角度
    double v = atan(1.0*r/d)*180/pi;
    //计算多少次后需要压枪
    int undo = v / a + 1;
    //是否需要压枪
    cout<<max(0,c-undo)<<endl;
    return 0;
}